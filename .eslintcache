[{"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\index.js":"1","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\reportWebVitals.js":"2","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\App.js":"3","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Song.js":"4","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Player.js":"5","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Library.js":"6","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\LibrarySong.js":"7","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Nav.js":"8","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\data.js":"9"},{"size":478,"mtime":1609955342357,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":2144,"mtime":1610878950108,"results":"13","hashOfConfig":"11"},{"size":324,"mtime":1610044900641,"results":"14","hashOfConfig":"11"},{"size":3448,"mtime":1610879995243,"results":"15","hashOfConfig":"11"},{"size":651,"mtime":1610369442274,"results":"16","hashOfConfig":"11"},{"size":1171,"mtime":1610877578141,"results":"17","hashOfConfig":"11"},{"size":490,"mtime":1610369145477,"results":"18","hashOfConfig":"11"},{"size":3978,"mtime":1610870458573,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"xj48hg",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\index.js",[],["40","41"],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\reportWebVitals.js",[],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\App.js",[],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Song.js",[],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Player.js",["42"],"import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst Player = ({currentSong, isPlaying, setIsPlaying, audioRef, setSongInfo, songInfo, songs, setCurrentSong, setSongs,}) => {\r\n\r\n    const activeLibraryHandler = (nextPrev) => {\r\n     const newSongs = songs.map((song) => {\r\n        if(song.id === currentSong.id){\r\n            return{\r\n                ...song,\r\n                active: true,\r\n            };\r\n        }   else {\r\n            return {\r\n                ...song,\r\n                active: false,\r\n            };\r\n        }\r\n     });\r\n    }\r\n    //Event Handlers\r\n    const playSongHandler = () => {\r\n        if (isPlaying) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        } else {\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n    };\r\n    \r\n    const getTime = (time) => {\r\n        return(\r\n            Math.floor(time /60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        );\r\n    };\r\n    const dragHandler = (e) => {\r\n        audioRef.current.currentTime = e.target.value;\r\n        setSongInfo({...songInfo, currentTime: e.target.value})\r\n    };\r\n    const skipTrackHandler = async (direction) => {\r\n        let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n        if(direction === 'skip-forward'){\r\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\r\n        }\r\n        if(direction === 'skip-back'){\r\n            if((currentIndex-1) % songs.length === -1) {\r\n                await setCurrentSong(songs[songs.length - 1]);\r\n                activeLibraryHandler(songs[songs.length - 1]);\r\n                if (isPlaying) audioRef.current.play();\r\n                return;\r\n            }\r\n            await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n            activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\r\n        }\r\n        if (isPlaying) audioRef.current.play();\r\n    };\r\n    //Add the styles\r\n    const trackAnim = {\r\n        transform: `translateX(${songInfo.animationPercentage}%)`\r\n    }\r\n    \r\n    return(\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                <div style={{background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`}} className=\"track\">\r\n                <input min={0} max={songInfo.duration || 0} onChange={dragHandler} value={songInfo.currentTime} type=\"range\"/>\r\n                <div style={trackAnim} className=\"animate-track\"></div>\r\n                </div>\r\n                <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\r\n            </div>\r\n            <div className=\"play-control\">\r\n                <FontAwesomeIcon onClick={ () => skipTrackHandler('skip-back')} className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\r\n                <FontAwesomeIcon onClick={playSongHandler} className=\"play\" size=\"2x\" icon={isPlaying ? faPause : faPlay} />\r\n                <FontAwesomeIcon onClick={ () => skipTrackHandler('skip-forward')} className=\"skip-forward\" size=\"2x\" icon={faAngleRight} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Player;","D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Library.js",[],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\LibrarySong.js",[],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\components\\Nav.js",[],"D:\\Workspaces\\JS\\React Tuts\\react-player\\src\\data.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":9,"column":12,"nodeType":"49","messageId":"50","endLine":9,"endColumn":20},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'newSongs' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]